<?php

    class modGedcom{
        public $host;
        function __construct(){
            $this->host = new Host('Joomla');
        }
        function getStatistic(){

           
            header('Content-Type: text/xml');
            $xml_string = "<?xml version='1.0' encoding='iso-8859-1' ?>";
            $xml_string .= "<statistics>";


            $xml_string .= "<softname>".$this->host->gedcom->file->getSoftName()."</softname>";
            $xml_string .= "<softversion>".$this->host->gedcom->file->getSoftVersion()."</softversion>";
            $xml_string .= "<creationdate>".$this->host->gedcom->file->getCreationDate()."</creationdate>";
            $pers = $this->host->gedcom->individuals->get('I1');

            $xml_string .= "<numberOfFamilies>".$this->host->gedcom->families->count()."</numberOfFamilies>";

            $xml_string .= "<numberOfIndividuals>".$this->host->gedcom->individuals->count()."</numberOfIndividuals>";
            $xml_string .= "<numberOfSources>".$this->host->gedcom->sources->count()."</numberOfSources>";
            $xml_string .= "<numberOfNotes>".$this->host->gedcom->notes->count()."</numberOfNotes>";
            $xml_string .= "<avchild>".number_format($this->host->gedcom->families->averageChildren(), 2, '.', ' ')."</avchild>";
            $xml_string .= "<mostCommon>".urldecode($this->getMostCommonSurnames())."</mostCommon>";
            $xml_string .= "<file>".$this->host->gedcom->file->getFileName()."</file>";
            $xml_string .= "<yearliest>".(int)substr($this->host->gedcom->events->getEarliestBirth(), 0, 4)."</yearliest>";
            $xml_string .= "<latest>".(int)substr($this->host->gedcom->events->getLatestBirth(), 0, 4)."</latest>";
            $xml_string .= "<avdeath>".$this->averageAgeOfDeath()."</avdeath>";
            $xml_string .= "<longlive>".urldecode($this->longLive())."</longlive>";
            $result = $this->host->gedcom->families->maxChildren();
            $xml_string .= "<mostchild>".$result['counter'].", ".$result['husband']."(".$result['husband_id'].")"." and ".$result['wife']."(".$result['wife_id'].")"."</mostchild>";
            $xml_string .= "</statistics>";
            echo $xml_string;
        }
        function import(){
            //exported generated by jmb file seems to be modified after downloading(appears '0D 0A'(in HEX) at the begining of file),
            //so pcl.zip wouldn't extract it. temporary solution is next - if parser couldnt handle file, creating temporary file,
            //which is copy if given, except of first 2 bytes, and trying to parse it.
            if($this->host->gedcom->Import($_FILES["gedcom"]["tmp_name"], $_FILES["gedcom"]["name"])==false){
                $tempfile = JPATH_ROOT .DS. 'components' .DS. 'com_manager' .DS. "tmp.zip";
                $w = fopen($tempfile,'w+');
                $r = fopen($_FILES["gedcom"]["tmp_name"],'r');
                flock ($w,2);
                fread($r, 2);
               while (!feof($r)){
                    fwrite($w,fread($r, 2048));
               }
               fclose($w);
               fclose($r);

               $this->host->gedcom->Import($tempfile, $_FILES["gedcom"]["name"]);
               unlink($tempfile);
            }else{
                return false;
            }
  
        }
        function export(){
            $file = $this->host->gedcom->Export();
            if(is_file($file)){
                header("Content-Type: application/zip");
                header("Content-Disposition: attachment; filename=".$this->host->gedcom->file->getFileName().".zip");
               
                readfile($file);
                
                unlink($file);
            }
        }

        function getMostCommonSurnames(){
             $db =& JFactory::getDBO();
             $db->setQuery('SELECT n_surname, sum( 1 ) AS counter
                                FROM #__mb_name
                                WHERE n_surname!= "@N.N."
                                GROUP BY n_surname
                                ORDER BY `counter` DESC LIMIT 0,5');
             $rows = $db->loadAssocList();
             foreach($rows as $row){
                 $result .= $row['n_surname'] . ", ";
             }

            // echo $result;
             $result = substr($result, 0, strlen($result)-2);
             return $result;
            
        }
        function averageAgeOfDeath(){
             $db =& JFactory::getDBO();
             $req = "SELECT AVG((death.d_year- borth.d_year)) FROM #__mb_individuals
                  INNER JOIN #__mb_dates AS borth ON #__mb_individuals.i_id = borth.d_gid INNER JOIN #__mb_dates as death
                 ON #__mb_individuals.i_id = death.d_gid WHERE borth.d_fact='BIRT' AND death.d_fact ='DEAT' AND borth.d_year!='' AND death.d_year!='' AND borth.d_year!=0 AND death.d_year!=0";
             $db->setQuery($req);
             $rows = $db->loadAssocList();
             return substr($rows[0]['AVG((death.d_year- borth.d_year))'],0,4);

        }
        function longLive(){
             $db =& JFactory::getDBO();
             $req = "SELECT (death.d_year- borth.d_year) AS lifetime, #__mb_name.n_surname, #__mb_name.n_givn, #__mb_name.n_id , borth.d_year as borth_date,  death.d_year as death_date FROM #__mb_name
                  INNER JOIN #__mb_dates AS borth ON #__mb_name.n_id = borth.d_gid  INNER JOIN #__mb_dates as death
                 ON #__mb_name.n_id = death.d_gid WHERE borth.d_fact='BIRT' AND death.d_fact ='DEAT' AND borth.d_year!='' AND death.d_year!='' AND borth.d_year!=0 AND death.d_year!=0 ORDER BY lifetime DESC LIMIT 1";
             $db->setQuery($req);
             $rows = $db->loadAssocList();
             return substr($rows[0]['lifetime'],0,4)." - ".$rows[0]['n_givn']." ".$rows[0]['n_surname']."(".$rows[0]['n_id'].")";
        }
        function famWithMostChildren(){
            $db =& JFactory::getDBO();
             $req = "SELECT #__mb_family. * , #__mb_children.famkey, sum( 1 ) AS childcount, husb.surname AS husbSName, husb.givenname AS husbGName, wife.surname AS wifeSName, wife.givenname AS wifeGName
                        FROM #__mb_family
                        LEFT JOIN #__mb_indiv AS husb ON #__mb_family.spouse1 = husb.indkey
                        LEFT JOIN #__mb_indiv AS wife ON #__mb_family.spouse2 = wife.indkey
                        INNER JOIN #__mb_children
                        USING ( famkey )
                        GROUP BY #__mb_family.famkey
                        ORDER BY childcount DESC 
                        LIMIT 1";
             $db->setQuery($req);
             $rows = $db->loadAssocList();

             $max = $rows[0]['childcount'];

             return $max." - ".$rows[0]['husbGName']." ".$rows[0]['husbSName']."(".$rows[0]['spouse1'].") and ".$rows[0]['wifeGName']." ".$rows[0]['wifeSName']."(".$rows[0]['spouse2'].")";

        }
    }

?>