<ul id="webdoc" class="webdoc-viewer-index index" >
  <% documents.each do |document| %>
    <li>
      <ul class="viewer-controls-index index">
        <li class="button-group">
          <a href="#prev-page" class="button" data-webdoc-document-id="<%= document.uuid() %>" title="previous page">&lt;</a
          ><a href="#next-page" class="button" data-webdoc-document-id="<%= document.uuid() %>" title="next page">&gt;</a>
        </li>
        <li>
          <a class="webdoc-viewer-title" href="<%= document_path(document.uuid()) %>"><h4><%= h(document.title) %></h4></a>
        </li>
      </ul>

      <div class="webdoc-viewer-container" data-webdoc-document-id="<%= document.uuid() %>" id="<%= document.uuid() %>"></div>

      <p class="webdoc-viewer-details">
        <%= t("phrases.Created_by")%> <%= document.creator.first_name %>
        <% if ((params[:main_filter] && params[:main_filter] == "viewed")) %>
           viewed <%= document.views_count %> times
        <% else %>
          <%= relative_date document.created_at %>
        <% end %>
        <% if ((!params[:category_filter] || params[:category_filter] == "all") &&  document.category) %>
            in <%= link_to h(document.category.name), explore_path(:main_filter => params[:main_filter], :category_filter => document.category.id) %>
        <% end %>
      </p>
    </li>
  <% end %>
</ul>
<%= include_stylesheets :page_viewer, :media => 'all' %>
<% content_for :scripts do %>
  <%= include_javascripts :page_editor %>
  <%= include_javascripts :explore %>
  <%= javascript_include_tag "/gadgets/js/rpc.js?c=1&debug=1", "/gadgets/files/container/cookies.js", "/gadgets/files/container/util.js", "/gadgets/files/container/gadgets.js", "/gadgets/files/container/cookiebaseduserprefstore.js" %>
  <% javascript_tag do -%>
    <% documents.each do |document| %>
      <% # we need to remove </script> in the json otherwise it ends the containg script tag too early %>
      <% cached_document = Rails.cache.fetch("#{document.cache_key}_wo_script") { document.to_json(:include => { :pages => { :include => :items} }).gsub(/<\/script>/, "</*script>") } %>
      try {
        MTools.ServerManager.cache.store(new WebDoc.Document(<%= raw cached_document.dup %>));
      }
      catch(e) {
        ddd("error in doc ", e);
      }
    <% end %>
  <% end -%>

<% end %>