<div id="media-browser-my-content" class='media-browser-tab'>
  <%= render 'users/my_content_header'%>
  <div id="media-browser-my-images" class='my-content-tab '>
    <a href='#upload-images' class=''>
      <%= t('.add_image') %>
    </a>
    <div id="my-images-library" class='thumbnails'>

    </div>
  </div>
  
  
  <div id="media-browser-my-images-details" style='display:none' class='my-content-tab'>
    <a href='#my-images' id='image-detail-back' class='back'>Back</a>
    <div id="image-details">
      <div class='single_image'>
        <a href='' onclick="window.open(this.getAttribute('href'), '_blank'); return false;">
          <img src='' alt='' />
          <div class='icon_overlay'></div>
        </a>
      </div>
      <h4 class="image_name"></h4>
      <h5 class="image_size"></h5>
      <div class="actions">
        <ul>
          <li>
            <a id="add_image_to_page_action" href="">Add to page</a>
          </li>
          <li>
            <a id="set_image_as_bg_action" href="">Set as background</a>
          </li>
        </ul>
      </div>
    </div>
  </div>
  
  <div id="media-browser-upload-images" style='display:none' class='my-content-tab'>
    <div id="swfupload_container" style='display:none'>
      <input id='upload_images_button' type='button' value="Choose images" />
    </div>

    <h1><%= t('.add_images_view.title') %></h1>
    <div id="upload_control">
      <span id='upload_images_button_background' class='button'><%= t('.buttons.upload') %></span>
      <button id='cancel_images_upload' class='button' style='display:none'><%= t('.buttons.cancel_upload') %></button>
      <div id="upload_images_spinner" style='display:none'></div>
      <span class='uploading_info'><%= t('.add_images_view.choose_upload_image') %> </span>
      <a href='#my-images'><%= t('.buttons.back') %></a>
    </div>
  </div>
</div>


<script type='text/javascript'>
  // MyContentController is used to manage my image and user's favorites.
  WebDoc.MyContentController = $.klass(WebDoc.Library,{
        
    initialize: function($super, libraryId) {
  		$super(libraryId);
  		this.imageDetailsView = $('#media-browser-my-images-details #image-details');
  		this.prepareImageDetailsView();
  		this.domNode = $('#media-browser-my-content');
  		this._createHandlers('click', this._myContentHandlers);
      
      this.imagePage = 1;
      this.myImagesContainer = $('#media-browser-my-images');
      this.loadMyImages();  
      this.imagesUploader = new WebDoc.ImagesUploader('upload_control', this);
      
      $(".thumbnails").bind("dragstart", this.dragStart.pBind(this));
      
    },
    
    loadMyImages: function(){
      var thumbsWrap = this.myImagesContainer.find(".thumbnails");
      this.showSpinner(thumbsWrap);
            
      WebDoc.ServerManager.getRecords(WebDoc.Image, null, function(data) {
        if (data.images.length === 0) {
          var noImages = $("<span>").addClass('no_items').text('No Images');
          thumbsWrap.append(noImages);
        }
        else {
          var myImagesList = $("<ul>");
          thumbsWrap.append(myImagesList);
          
          $.each(data.images, function(i,webDocImage){
            myImagesList.append(this.buildThumbnail(webDocImage.data.properties, webDocImage.data.uuid));
          }.pBind(this));
        }
        thumbsWrap.data('loaded', true);
        this.hideSpinner(thumbsWrap);
      }.pBind(this), { ajaxParams: { page:this.imagePage }});
      
      $("#media-browser-my-images .thumbnails ul li a").live("click", function (event) {
        var properties = $(event.target).parent().find('img').data("properties");
        this.showDetailsView(properties);
        event.preventDefault();
      }.pBind(this));
      
    },
    
    _createHandlers: function(eventType, obj, context){
      this.domNode
      .delegate('a', eventType, WebDoc.handlers._makeLinkHandler( obj, context ) );
      //NOTE: _makeLinkHandler( obj, context ) is supposed to be private, but it's an easy way to listen the link
    },
    
    _myContentHandlers: {
      'my-images':  function(e){ WebDoc.application.myContentController.showMyImages(); },
      'favorites':  function(e){ WebDoc.application.myContentController.showFavorites(); },
      'upload-images': function(e){ WebDoc.application.myContentController.showUploader(); },
    },
    
    showMyImages: function(){
      this._hideAll();
			$('#media-browser-my-images').show();
    },
    
    showFavorites: function(){
      this._hideAll();
      if($('#media-browser-favorites').length){
  			$('#media-browser-favorites').show();
			}
			else{
			  $.ajax({
  			  url: "/users/favorites",
  			  success: function(html){
  			    $("#media-browser-my-content").append(html);
  			  }
  			});
			}
    },
    
    showUploader: function(){
      this._hideAll();
      $('#media-browser-upload-images').show();
      this.imagesUploader.loadSWFUpload();
    },
    
    prepareImageDetailsView: function(){
      // handle possible actions 
      $("#media-browser-my-images-details .actions").click(function(event){
        event.preventDefault();

        var properties = this.detailsViewImg.data("properties"); //properties of the currenlty displayed image are store in this element

        var link = $(event.target);
        var li = link.parent(); 
        var info = $("<span>").text("...");

        switch (link.attr("id")) {
          case "add_image_to_page_action":
            ddd("add (original) image to page action");
            var imageUrl = null;
            if(link.attr("id") == "add_original_image_to_page_action") {
              imageUrl = properties.url
            }
            else {
              imageUrl = properties.default_url ? properties.default_url : properties.url;
            }
            WebDoc.application.boardController.insertImage(imageUrl, undefined, properties.id);
            break;

          case "set_image_as_bg_action": 
            var page = WebDoc.application.pageEditor.currentPage;
            var imgUrl = this.detailsViewImg.attr("src");
            page.setBackgroundImage("url("+imgUrl+")");
            page.setBackgroundRepeatMode("no-repeat");
            page.setBackgroundPosition("center center");
            // Jump to page inspector, where you can set how the background image is displayed
            WebDoc.application.rightBarController.showPageInspector();
            break;

          case "delete_image_action": //delete an uploaded image from My Images
            if (confirm ("Are you sure?")) {
              link.hide();
              li.append(info);

              $.ajax({
                type: "DELETE",
                url: "/images/"+properties.uuid,
                success: function(serverData) {
                  li.remove();
                  //remove thumbnail from the my images' list
                  $('#' + properties.uuid).remove();
                  this.showMyImages();
                }.pBind(this),
                error: function(){
                },
                complete: function() {
                }.pBind(this)
              });
            }
            break;
        }

      }.pBind(this));
    },
    
    showDetailsView: function(properties){
      this._hideAll();
      this.detailsViewImg = this.imageDetailsView.find('.single_image img');
      
      this.imageDetailsView.find('.single_image')
      .attr({ draggable: "true" })
      .bind("dragstart", this.dragStart.pBind(this));
      
      this.imageDetailsView.attr({'class':"view details_view "+properties.type});
      
      // Image name
      var name = "";
      if (properties.name){
        name = properties.name;
      }
      else if (properties.url.match(/([^\/\\]+)\.([a-z0-9]{3,4})$/i)) { // extract filename
        name = RegExp.$1 +"."+ RegExp.$2;
      }
      this.imageDetailsView.find('.image_name').text(name);
      
      // Image size
      var imageSizeEl = this.imageDetailsView.find('.image_size');
      if (properties.width && properties.height) {
        imageSizeEl.text(properties.width+" x "+properties.height);
      }
      else {
        imageSizeEl.text('');
      }
      
      // Image Link
      var imageLink = properties.image_link ? properties.image_link : properties.url;
      this.imageDetailsView.find('.single_image a').attr({"href":imageLink});
      
      // Image source (+ store the current properties in the img element)
      var imageContainer = this.imageDetailsView.find('.single_image');
      imageContainer.hide();
      imageContainer.before($('<div class="loading">Loading</div>'));
      this.detailsViewImg.attr({'src':properties.url}).data("properties", properties);
      this.preloadImage(properties.url);
      
      //setup the delete link
      if( $('#media-browser-my-images-details #delete_image_action').length < 1){
        liDelete = $('<li>').append($("<a href='' id='delete_image_action'>Delete </a>"));
        $("#media-browser-my-images-details #image-details .actions ul").append(liDelete);
      }
      
      $('#media-browser-my-images-details').show();
    },
    
    preloadImage: function(imageSrc) {
      var oImage = new Image();
      // set up event handlers for the Image object
      oImage.onload = this.preloadImageDidLoad.pBind(this);
      oImage.onerror = this.preloadImageError.pBind(this);
      oImage.src = imageSrc;
    },
    
    preloadImageDidLoad: function() {
      this.imageDetailsView.find('.loading').remove();
      this.imageDetailsView.find('.single_image').show();
    },
    
    preloadImageError: function() {
      this.imageDetailsView.find('.loading').remove();
    },
    
    //Used for insert uploaded image directy in the dom
    insertImage: function(image_data){
      var data = eval('(' + image_data + ')');
      var liWrap = this.buildThumbnail(data.image.properties, data.image.uuid);
      
      var ulWrap = $('#my-images-library').find('ul');
      if( ulWrap.length < 1){
        ulWrap = $('<ul>');
        $('#my-images-library').append(ulWrap);
      }
      
      ulWrap.prepend(liWrap);
      $(".thumbnails").bind("dragstart", this.dragStart.pBind(this));
      
    },
    
    buildThumbnail: function(_properties, uuid) {
      ddd('uuid : ' + uuid);
      
      var properties = {
        url: _properties.url,
        thumb_url: _properties.thumb_url,
        image_link: _properties.default_url,
        type: 'application/wd-image',
        uuid: uuid
      };
      
      var thumb = $("<img>").attr({
        src : _properties.thumb_url,
        alt : "",
        type:"my_image"
      })
      .data("properties", properties);
      
      var liWrap = $("<li>").attr({id: uuid});
      var aWrap = $("<a href='' title=''></a>");
      aWrap.append(thumb);
      //aWrap.append($("<span>").addClass("icon_overlay")); //flickr/google mini icon
      liWrap.append(aWrap);
    
      return liWrap;
    },
    
    dragStart: function(event) {      
      // we take parent and then search down the img because safari and firefox have not the same target.
      // on firefox target is the a tag but in safarai target is the img.
      var draggingImg = $(event.target).parent().find('img');

      var properties = draggingImg.data("properties");

      var dt = event.originalEvent.dataTransfer;
      var imageUrl = properties.default_url ? properties.default_url : properties.url;
      dt.setData("application/wd-image", $.toJSON({url:imageUrl,id:properties.id}));
      
      // Drag "feedback"
      var mediaDragFeedbackEl = this.buildMediaDragFeedbackElement("image", properties.thumb_url);
      $(document.body).append(mediaDragFeedbackEl);
      dt.setDragImage( mediaDragFeedbackEl[0], 60, 60 );
    },
    
    _hideAll: function(){
      $('.my-content-tab').hide();
      // this.imagesUploader.unloadSWFUpload();
    }
  });
  
  WebDoc.application.myContentController = new WebDoc.MyContentController('media-browser-my-content');
  
</script>